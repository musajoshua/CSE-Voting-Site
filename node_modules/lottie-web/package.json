{
  "_args": [
    [
      {
        "raw": "lottie-web",
        "scope": null,
        "escapedName": "lottie-web",
        "name": "lottie-web",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/Applications/XAMPP/xamppfiles/htdocs/splash/splash"
    ]
  ],
  "_from": "lottie-web@latest",
  "_id": "lottie-web@5.1.9",
  "_inCache": true,
  "_location": "/lottie-web",
  "_nodeVersion": "8.9.1",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/lottie-web_5.1.9_1521595366010_0.9392203718379528"
  },
  "_npmUser": {
    "name": "airnan",
    "email": "hernantorrisi@gmail.com"
  },
  "_npmVersion": "5.5.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "lottie-web",
    "scope": null,
    "escapedName": "lottie-web",
    "name": "lottie-web",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/lottie-web/-/lottie-web-5.1.9.tgz",
  "_shasum": "a6904c145ee6dd3c9bd074aad57a75baf116fd19",
  "_shrinkwrap": null,
  "_spec": "lottie-web",
  "_where": "/Applications/XAMPP/xamppfiles/htdocs/splash/splash",
  "bugs": {
    "url": "https://github.com/airbnb/lottie-web/issues"
  },
  "dependencies": {},
  "description": "After Effects plugin for exporting animations to SVG + JavaScript or canvas + JavaScript",
  "devDependencies": {
    "event-stream": "^3.3.4",
    "events-stream": "^0.2.0",
    "gulp": "^3.9.0",
    "gulp-batch-replace": "0.0.0",
    "gulp-cheerio": "^0.6.2",
    "gulp-concat": "^2.6.0",
    "gulp-gzip": "^1.2.0",
    "gulp-html-replace": "^1.6.1",
    "gulp-jshint": "^1.11.2",
    "gulp-jslint": "^1.0.10",
    "gulp-jsoncombine": "^1.0.3",
    "gulp-rename": "^1.2.2",
    "gulp-replace": "^0.5.4",
    "gulp-uglify": "^1.4.1",
    "gulp-usemin": "^0.3.14",
    "gulp-watch": "^4.3.5",
    "gulp-wrap": "^0.11.0",
    "markdown-pdf": "^8.0.0",
    "through2": "^2.0.3"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-1uGdt6YTlo5zUBUoPLnAPYFIu3A0BTiZapTBcuOirkmRAHuXqVNsL4LFdoJAsjqiNSh8KHwRLbC6qKdXIElOOg==",
    "shasum": "a6904c145ee6dd3c9bd074aad57a75baf116fd19",
    "tarball": "https://registry.npmjs.org/lottie-web/-/lottie-web-5.1.9.tgz",
    "fileCount": 199,
    "unpackedSize": 9199240
  },
  "gitHead": "ae4d5a0d5a2b1f3bf06639ed05e04f7ee5121e0c",
  "homepage": "https://github.com/airbnb/lottie-web#readme",
  "keywords": [
    "animation",
    "canvas",
    "svg",
    "after effects",
    "plugin",
    "export"
  ],
  "license": "MIT",
  "main": "./build/player/lottie.js",
  "maintainers": [
    {
      "name": "airnan",
      "email": "hernantorrisi@gmail.com"
    }
  ],
  "name": "lottie-web",
  "optionalDependencies": {},
  "readme": "# Lottie for Web, [Android](https://github.com/airbnb/lottie-android), [iOS](https://github.com/airbnb/lottie-ios), and [React Native](https://github.com/airbnb/lottie-react-native)\r\n\r\nLottie is a mobile library for Web,  and iOS that parses [Adobe After Effects](http://www.adobe.com/products/aftereffects.html) animations exported as json with [Bodymovin](https://github.com/airbnb/lottie-web) and renders them natively on mobile!\r\n\r\nFor the first time, designers can create **and ship** beautiful animations without an engineer painstakingly recreating it by hand. They say a picture is worth 1,000 words so here are 13,000:\r\n\r\n\r\n\r\n# View documentation, FAQ, help, examples, and more at [airbnb.io/lottie](http://airbnb.io/lottie/)\r\n\r\n\r\n\r\n![Example1](gifs/Example1.gif)\r\n\r\n\r\n![Example2](gifs/Example2.gif)\r\n\r\n\r\n![Example3](gifs/Example3.gif)\r\n\r\n\r\n![Community](gifs/Community%202_3.gif)\r\n\r\n\r\n![Example4](gifs/Example4.gif)\r\n\r\n\r\n# Plugin installation\r\n\r\n### Option 1 (Recommended):\r\n**Download it from from aescripts + aeplugins:**\r\nhttp://aescripts.com/bodymovin/\r\n\r\n### Option 2:\r\n**Or get it from the adobe store**\r\nhttps://creative.adobe.com/addons/products/12557\r\nCC 2014 and up.\r\n\r\n## Other installation options:\r\n\r\n### Option 3:\r\n- download the ZIP from the repo.\r\n- Extract content and get the .zxp file from '/build/extension'\r\n- Use the [ZXP installer](http://aescripts.com/learn/zxp-installer/) from aescripts.com.\r\n\r\n### Option 4:\r\n- Close After Effects<br/>\r\n- Extract the zipped file on build/extension/bodymovin.zxp to the adobe CEP folder:<br/>\r\nWINDOWS:<br/>\r\nC:\\Program Files (x86)\\Common Files\\Adobe\\CEP\\extensions or<br/>\r\nC:\\<username>\\AppData\\Roaming\\Adobe\\CEP\\extensions<br/>\r\nMAC:<br/>\r\n/Library/Application\\ Support/Adobe/CEP/extensions/bodymovin<br/>\r\n(you can open the terminal and type:<br/>\r\ncp -R YOURUNZIPEDFOLDERPATH/extension /Library/Application\\ Support/Adobe/CEP/extensions/bodymovin<br/>\r\nthen type:<br/>\r\nls /Library/Application\\ Support/Adobe/CEP/extensions/bodymovin<br/>\r\nto make sure it was copied correctly type)<br/>\r\n\r\n- Edit the registry key:<br/>\r\nWINDOWS:<br/>\r\nopen the registry key HKEY_CURRENT_USER/Software/Adobe/CSXS.6 and add a key named PlayerDebugMode, of type String, and value 1.<br/>\r\nMAC:<br/>\r\nopen the file ~/Library/Preferences/com.adobe.CSXS.6.plist and add a row with key PlayerDebugMode, of type String, and value 1.<br/>\r\n\r\n### Option 5:\r\n\r\nInstall the zxp manually following the instructions here:\r\nhttps://helpx.adobe.com/x-productkb/global/installingextensionsandaddons.html\r\nSkip directly to \"Install third-party extensions\"\r\n\r\n### After installing\r\n- **Windows:** Go to Edit > Preferences > General > and check on \"Allow Scripts to Write Files and Access Network\"\r\n- **Mac:** Go to Adobe After Effects > Preferences > General > and check on \"Allow Scripts to Write Files and Access Network\"\r\n\r\n# HTML player installation\r\n```bash\r\n# with npm\r\nnpm install lottie-web\r\n\r\n# with bower\r\nbower install bodymovin\r\n```\r\nOr you can use the script file from here:\r\nhttps://cdnjs.com/libraries/bodymovin\r\nOr get it directly from the AE plugin clicking on Get Player\r\n\r\n# Demo\r\n[See a basic implementation here.](https://codepen.io/airnan/project/editor/ZeNONO/) <br/>\r\n\r\n# Examples\r\n[See examples on codepen.](http://codepen.io/collection/nVYWZR/) <br/>\r\n\r\n## How it works\r\n[Here's](https://www.youtube.com/watch?v=5XMUJdjI0L8) a video tutorial explaining how to export a basic animation and load it in an html page <br />\r\n### After Effects\r\n- Open your AE project and select the bodymovin extension on Window > Extensions > bodymovin\r\n- A Panel will open with a Compositions tab listing all of your Project Compositions.\r\n- Select the composition you want to export.\r\n- Select a Destination Folder.\r\n- Click Render\r\n- look for the exported json file (if you had images or AI layers on your animation, there will be an images folder with the exported files)\r\n\r\n### HTML\r\n- get the lottie.js file from the build/player/ folder for the latest build\r\n- include the .js file on your html (remember to gzip it for production)\r\n```html\r\n<script src=\"js/lottie.js\" type=\"text/javascript\"></script>\r\n```\r\nYou can call lottie.loadAnimation() to start an animation.\r\nIt takes an object as a unique param with:\r\n- animationData: an Object with the exported animation data.\r\n- path: the relative path to the animation object. (animationData and path are mutually exclusive)\r\n- loop: true / false / number\r\n- autoplay: true / false it will start playing as soon as it is ready\r\n- name: animation name for future reference\r\n- renderer: 'svg' / 'canvas' / 'html' to set the renderer\r\n- container: the dom element on which to render the animation\r\n\r\n\r\nIt returns the animation instance you can control with play, pause, setSpeed, etc.\r\n\r\n```js\r\nlottie.loadAnimation({\r\n  container: element, // the dom element that will contain the animation\r\n  renderer: 'svg',\r\n  loop: true,\r\n  autoplay: true,\r\n  path: 'data.json' // the path to the animation json\r\n});\r\n```\r\n\r\n#### Composition Settings:\r\nCheck this wiki page for an explanation for each setting.\r\nhttps://github.com/airbnb/lottie-web/wiki/Composition-Settings\r\n\r\n## Usage\r\nAnimation instances have these main methods:\r\n### play\r\n\r\n***\r\n### stop\r\n\r\n***\r\n### pause\r\n\r\n***\r\n### setLocationHref(href)\r\n- `href`: usually pass as `location.href`. Its useful when you experience mask issue in safari where your url does not have `#` symbol.\r\n\r\n***\r\n### setSpeed(speed)\r\n- `speed`: 1 is normal speed.\r\n\r\n***\r\n### goToAndStop(value, isFrame)\r\n- `value`: numeric value.\r\n- `isFrame`: defines if first argument is a time based value or a frame based (default false).\r\n\r\n***\r\n### goToAndPlay(value, isFrame)\r\n- `value`: numeric value.\r\n- `isFrame`: defines if first argument is a time based value or a frame based (default false).\r\n\r\n***\r\n### setDirection(direction)\r\n- `direction`: 1 is forward, -1 is reverse.\r\n\r\n***\r\n### playSegments(segments, forceFlag)\r\n- `segments`: array. Can contain 2 numeric values that will be used as first and last frame of the animation. Or can contain a sequence of arrays each with 2 numeric values.\r\n- `forceFlag`: boolean. If set to false, it will wait until the current segment is complete. If true, it will update values immediately.\r\n***\r\n### setSubframe(useSubFrames)\r\n- `useSubFrames`:  If false, it will respect the original AE fps. If true, it will update on every requestAnimationFrame with intermediate values. Default is true.\r\n***\r\n### destroy()\r\n***\r\n\r\n### Aditional methods:\r\n- updateTextDocumentData -- updates a text layer's data\r\n[More Info](https://github.com/airbnb/lottie-web/wiki/TextLayer.updateDocumentData)\r\n***\r\n\r\n### Lottie has 8 global methods that will affect all animations:\r\n**lottie.play()** -- with 1 optional parameter **name** to target a specific animation <br/>\r\n**lottie.stop()** -- with 1 optional parameter **name** to target a specific animation <br/>\r\n**lottie.setSpeed()** -- first argument speed (1 is normal speed) -- with 1 optional parameter **name** to target a specific animation <br/>\r\n**lottie.setDirection()** -- first argument direction (1 is normal direction.) -- with 1 optional parameter **name** to target a specific animation <br/>\r\n**lottie.searchAnimations()** -- looks for elements with class \"lottie\" or \"bodymovin\" <br/>\r\n**lottie.loadAnimation()** -- Explained above. returns an animation instance to control individually. <br/>\r\n**lottie.destroy()** -- To destroy and release resources. The DOM element will be emptied.<br />\r\n**lottie.registerAnimation()** -- you can register an element directly with registerAnimation. It must have the \"data-animation-path\" attribute pointing at the data.json url<br />\r\n**lottie.setQuality()** -- default 'high', set 'high','medium','low', or a number > 1 to improve player performance. In some animations as low as 2 won't show any difference.<br />\r\n\r\n## Events\r\n- onComplete\r\n- onLoopComplete\r\n- onEnterFrame\r\n- onSegmentStart\r\n\r\nyou can also use addEventListener with the following events:\r\n- complete\r\n- loopComplete\r\n- enterFrame\r\n- segmentStart\r\n- config_ready (when initial config is done)\r\n- data_ready (when all parts of the animation have been loaded)\r\n- loaded_images (when all image loads have either succeeded or errored)\r\n- DOMLoaded (when elements have been added to the DOM)\r\n- destroy\r\n\r\n#### Other loading options\r\n- if you want to use an existing canvas to draw, you can pass an extra object: 'renderer' with the following configuration:\r\n```js\r\nlottie.loadAnimation({\r\n  container: element, // the dom element\r\n  renderer: 'svg',\r\n  loop: true,\r\n  autoplay: true,\r\n  animationData: animationData, // the animation data\r\n  rendererSettings: {\r\n    context: canvasContext, // the canvas context\r\n    scaleMode: 'noScale',\r\n    clearCanvas: false,\r\n    progressiveLoad: false, // Boolean, only svg renderer, loads dom elements when needed. Might speed up initialization for large number of elements.\r\n    hideOnTransparent: true, //Boolean, only svg renderer, hides elements when opacity reaches 0 (defaults to true)\r\n    className: 'some-css-class-name'\r\n  }\r\n});\r\n```\r\nDoing this you will have to handle the canvas clearing after each frame\r\n<br/>\r\nAnother way to load animations is adding specific attributes to a dom element.\r\nYou have to include a div and set it's class to \"lottie\".\r\nIf you do it before page load, it will automatically search for all tags with the class \"lottie\".\r\nOr you can call `lottie.searchAnimations()` after page load and it will search all elements with the class \"lottie\".\r\n<br/>\r\n- Add the data.json to a folder relative to the html\r\n- Create a div that will contain the animation.\r\n- **Required**\r\n  - A class called \"lottie\"\r\n  - A \"data-animation-path\" attribute with relative path to the data.json\r\n- **Optional**\r\n  - A \"data-anim-loop\" attribute\r\n  - A \"data-name\" attribute to specify a name to target play controls specifically\r\n\r\n**Example**\r\n\r\n```html\r\n <div style=\"width:1067px;height:600px\"  class=\"lottie\" data-animation-path=\"animation/\" data-anim-loop=\"true\" data-name=\"ninja\"></div>\r\n```\r\n\r\n\r\n\r\n## Preview\r\nYou can preview or take an svg snapshot of the animation to use as poster. After you render your animation, you can take a snapshot of any frame in the animation and save it to your disk. I recommend to pass the svg through an svg optimizer like https://jakearchibald.github.io/svgomg/ and play around with their settings.<br/>\r\n\r\n## Recommendations\r\n\r\n### Files\r\nIf you have any images or AI layers that you haven't converted to shapes (I recommend that you convert them, so they get exported as vectors, right click each layer and do: \"Create shapes from Vector Layers\"), they will be saved to an images folder relative to the destination json folder.\r\nBeware not to overwrite an exiting folder on that same location.\r\n\r\n\r\n### Performance\r\nThis is real time rendering. Although it is pretty optimized, it always helps if you keep your AE project to what is necessary<br/>\r\nMore optimizations are on their way, but try not to use huge shapes in AE only to mask a small part of it.<br/>\r\nToo many nodes will also affect performance.\r\n\r\n### Help\r\nIf you have any animations that don't work or want me to export them, don't hesitate to write. <br/>\r\nI'm really interested in seeing what kind of problems the plugin has. <br/>\r\nmy email is **hernantorrisi@gmail.com**\r\n\r\n\r\n## AE Feature Support\r\n- The script supports precomps, shapes, solids, images, null objects, texts\r\n- It supports masks and inverted masks. Maybe other modes will come but it has a huge performance hit.\r\n- It supports time remapping\r\n- The script supports shapes, rectangles, ellipses and stars.\r\n- Expressions. Check the wiki page for [more info.](https://github.com/bodymovin/bodymovin/wiki/Expressions)\r\n- Not supported: image sequences, videos and audio are not supported\r\n- **No  negative layer stretching**! No idea why, but stretching a layer messes with all the data.\r\n\r\n## Development\r\n`npm install` or `bower install` first\r\n`npm start`\r\n\r\n## Notes\r\n- If you want to modify the parser or the player, there are some gulp commands that can simplify the task\r\n- look at the great animations exported on codepen [See examples on codepen.](http://codepen.io/collection/nVYWZR/)\r\n- gzipping the animation jsons and the player have a huge reduction on the filesize. I recommend doing it if you use it for a project.\r\n\r\n## Issues\r\n- For missing mask in Safari browser, please anim.setLocationHref(locationHref) before animation is generated. It usually caused by usage of base tag in html. (see above for description of setLocationHref)\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/airbnb/lottie-web.git"
  },
  "scripts": {
    "start": "gulp buildAll"
  },
  "version": "5.1.9"
}
